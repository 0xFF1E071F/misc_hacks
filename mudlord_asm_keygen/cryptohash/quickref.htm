<html>

<head>
<meta http-equiv="Content-Language" content="hr">
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1250">
<title>New Page 1</title>
</head>

<body text="#FFFFFF" bgcolor="#336699">

<p><font face="monospace"><b><font size="4">Hash functions - TYPE 1<br>
-----------------------</font></b><br>
&nbsp;</font></p>
<hr>
<p><font face="monospace"><b>xxxInit</b><br>
<br>
xxxInit is the first function to call, it initializes internal buffer<br>
and sets digest to default value. it returns ponter to digest buffer which<br>
can be altered (e.g. setting digest after program restart). it takes no <br>
parameters.<br>
<br>
<b>BYTE * __stdcall xxxInit ();</b><br>
<br>
Parameters<br>
&nbsp;&nbsp;&nbsp; none<br>
Return Values<br>
&nbsp;&nbsp;&nbsp; pointer to digest bytes<br>
&nbsp;</font></p>
<hr>
<p><font face="monospace"><b>xxxUpdate</b><br>
<br>
xxxUpdate is function that updates digest from data hash.<br>
it takes two parameters, first is pointer to data, and second is<br>
data size. returns nothing.<br>
<br>
<b>__stdcall xxxUpdate ( BYTE *lpBuffer,DWORD dwBufLen );<br>
</b><br>
Parameters<br>
&nbsp;&nbsp;&nbsp; lpBuffer - pointer to data<br>
&nbsp;&nbsp;&nbsp; dwBufLen - size of data<br>
Return Values<br>
&nbsp;&nbsp;&nbsp; none<br>
<br>
&nbsp;</font></p>
<hr>
<p><font face="monospace"><br>
<b>xxxFinal</b><br>
<br>
xxxFinal is function that gives the final digest<br>
it returns ponter to digest buffer which can be altered but must be copied 
before<br>
another hashing session (of the same Hash function set).<br>
<br>
<b>BYTE * __stdcall xxxFinal ();</b><br>
<br>
Parameters<br>
&nbsp;&nbsp;&nbsp; none<br>
Return Values<br>
&nbsp;&nbsp;&nbsp; pointer to digest bytes<br>
<br>
<br>
<br>
<b><font size="4">Hash functions - TYPE 2 (Haval)<br>
-------------------------------</font></b><br>
<br>
HavalInit takes two parameters because of variable digest and passes<br>
<br>
<b>BYTE * __stdcall HavalInit ( DWORD DigestSizeBits,DWORD Passes );<br>
</b><br>
Parameters<br>
&nbsp;&nbsp;&nbsp; DigestSizeBits - digest size in bits : 128,160,192,224 or 256<br>
&nbsp;&nbsp;&nbsp; Passes - number of passes : 3,4 or 5<br>
Return Values<br>
&nbsp;&nbsp;&nbsp; pointer to digest bytes<br>
&nbsp;</font></p>
<hr>
<p><font face="monospace"><br>
<b><font size="4">Crypto functions<br>
----------------</font></b><br>
<br>
<u>Initialization - Key setup functions</u></font></p>
<p><font face="monospace">- take either only pointer to key (example: RC5)<br>
<br>
<b>__stdcall RC5Init ( BYTE *pKey );<br>
<br>
</b></font><font face="Courier New">Parameters<br>
&nbsp;&nbsp;&nbsp; pKey - pointer to key</font></p>
<hr>
<p><font face="monospace">- or key and variable key len (example:RC6)</font></p>
<p><b><font face="monospace">__stdcall RC6Init ( BYTE *pKey,DWORD dwKeyLen );<br>
<br>
</font></b><font face="Courier New">Parameters<br>
&nbsp;&nbsp;&nbsp; pKey - pointer to key<br>
&nbsp;&nbsp;&nbsp; dwKeyLen - size of key in bytes<br>
&nbsp;</font></p>
<hr>
<p><u><font size="4" face="Courier New">Encrypt,</font><font size="4" face="monospace">Decrypt 
functions</font></u></p>
<p><font face="Courier New"><b>__stdcall xxxEncrypt ( BYTE *pBlockIn,BYTE 
*pBlockOut );<br>
__stdcall xxxDecrypt ( BYTE *pBlockIn,BYTE *pBlockOut );</b><br>
<br>
Parameters<br>
&nbsp;&nbsp;&nbsp; pBlockIn - pointer to memory block<br>
&nbsp;&nbsp;&nbsp; pBlockOut - pointer to memory block</font></p>
<p>&nbsp;</p>

</body>

</html>
